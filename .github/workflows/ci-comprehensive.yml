name: Comprehensive CI

on:
  push:
    branches: [ main, develop ]
    paths-ignore:
      - '**/*.md'
      - 'docs/**'
  pull_request:
    branches: [ main, develop ]
    paths-ignore:
      - '**/*.md'
      - 'docs/**'
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: ${{ startsWith(github.ref, 'refs/pull/') }}

env:
  GOTOOLCHAIN: local
  GOFLAGS: -trimpath
  CGO_ENABLED: 0

permissions:
  contents: read
  security-events: write
  actions: read
  pull-requests: read

jobs:
  # Unit Tests
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        go-version: [1.21, 1.22, 1.23]
        os: [ubuntu-latest]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup Go ${{ matrix.go-version }}
      uses: actions/setup-go@v5
      with:
        go-version: ${{ matrix.go-version }}

    - name: Install dependencies
      run: |
        go mod download
        go mod verify
        go mod tidy

    - name: Run unit tests
      run: make test
      env:
        DEBUG: true

    - name: Upload test coverage
      uses: codecov/codecov-action@v4
      with:
        file: ./profile.out
        flags: unittests
        name: codecov-umbrella

  # Functional Tests
  functional-tests:
    name: Functional Tests
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        go-version: [1.23]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Go ${{ matrix.go-version }}
      uses: actions/setup-go@v5
      with:
        go-version: ${{ matrix.go-version }}

    - name: Install dependencies
      run: |
        go mod download
        go mod verify

    - name: Run functional tests
      run: make test_functional
      env:
        DEBUG: true

  # Security Scanning
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.23'

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

    - name: Run Gosec security scanner
      uses: securecodewarrior/github-action-gosec@master
      with:
        args: '-fmt sarif -out results.sarif ./...'

    - name: Upload Gosec scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'results.sarif'

  # Code Quality & Linting
  lint:
    name: Code Quality
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.23'

    - name: golangci-lint
      uses: golangci/golangci-lint-action@v4
      with:
        version: latest
        args: --timeout=5m
        goflags: -tags=functional

    - name: Staticcheck
      run: |
        go install honnef.co/go/tools/cmd/staticcheck@latest
        staticcheck -tags=functional ./...

    - name: Check formatting
      run: |
        if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
          echo "Code is not formatted. Run 'make fmt' to fix."
          gofmt -s -l .
          exit 1
        fi

  # Build Verification
  build:
    name: Build Verification
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        go-version: [1.21, 1.22, 1.23]
        os: [ubuntu-latest, windows-latest, macos-latest]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Go ${{ matrix.go-version }}
      uses: actions/setup-go@v5
      with:
        go-version: ${{ matrix.go-version }}

    - name: Install dependencies
      run: |
        go mod download
        go mod verify

    - name: Build all packages
      run: |
        go build -v ./...
        go build -v ./tools/...

    - name: Build with race detector
      run: |
        go build -race -v ./...
      if: matrix.os == 'ubuntu-latest'

    - name: Build with different tags
      run: |
        go build -tags=functional -v ./...
        go build -tags=integration -v ./...

  # Docker Build & Test
  docker:
    name: Docker Build & Test
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Kafka Docker image
      run: |
        docker build -f Dockerfile.kafka -t sarama-kafka:test .
        docker images

    - name: Test Docker image
      run: |
        docker run --rm sarama-kafka:test java -version
        docker run --rm sarama-kafka:test ls -la /opt/kafka-3.6.2/

    - name: Build multi-platform image
      run: |
        docker buildx build --platform linux/amd64,linux/arm64 -f Dockerfile.kafka -t sarama-kafka:multi .
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'

  # Dependency Analysis
  dependencies:
    name: Dependency Analysis
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.23'

    - name: Check for vulnerabilities in dependencies
      run: |
        go list -m all | grep -v "indirect" | cut -d' ' -f1 | xargs -I {} go list -json {} | jq -r '.Path + " " + .Version' > deps.txt
        echo "Dependencies list:"
        cat deps.txt

    - name: Run govulncheck
      run: |
        go install golang.org/x/vuln/cmd/govulncheck@latest
        govulncheck ./...

    - name: Check for outdated dependencies
      run: |
        go list -u -m all

  # Performance Tests
  performance:
    name: Performance Tests
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.23'

    - name: Install dependencies
      run: go mod download

    - name: Run benchmarks
      run: |
        go test -bench=. -benchmem ./... | tee benchmark-results.txt

    - name: Upload benchmark results
      uses: actions/upload-artifact@v4
      with:
        name: benchmark-results
        path: benchmark-results.txt

  # Integration Tests
  integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    services:
      kafka:
        image: confluentinc/cp-kafka:7.4.0
        env:
          KAFKA_ZOOKEEPER_CONNECT: localhost:2181
          KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
          KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
        ports:
          - 9092:9092
      zookeeper:
        image: confluentinc/cp-zookeeper:7.4.0
        env:
          ZOOKEEPER_CLIENT_PORT: 2181
        ports:
          - 2181:2181
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.23'

    - name: Install dependencies
      run: go mod download

    - name: Wait for Kafka
      run: |
        timeout 60 bash -c 'until echo exit | nc localhost 9092; do sleep 1; done'

    - name: Run integration tests
      run: |
        go test -tags=integration -v ./...
      env:
        KAFKA_BROKERS: localhost:9092

  # Documentation Check
  docs:
    name: Documentation Check
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.23'

    - name: Check documentation
      run: |
        go doc ./... > /dev/null
        echo "Documentation check passed"

    - name: Check README links
      run: |
        if command -v markdown-link-check >/dev/null 2>&1; then
          markdown-link-check README.md
        else
          echo "markdown-link-check not available, skipping link check"
        fi

  # Final Summary
  summary:
    name: CI Summary
    runs-on: ubuntu-latest
    needs: [unit-tests, functional-tests, security, lint, build, docker, dependencies, performance, integration, docs]
    if: always()
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Generate summary
      run: |
        echo "## CI Pipeline Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|-----|--------|" >> $GITHUB_STEP_SUMMARY
        echo "| Unit Tests | ${{ needs.unit-tests.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Functional Tests | ${{ needs.functional-tests.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Security Scan | ${{ needs.security.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Code Quality | ${{ needs.lint.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Build Verification | ${{ needs.build.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Docker Build | ${{ needs.docker.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Dependencies | ${{ needs.dependencies.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Performance | ${{ needs.performance.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Integration | ${{ needs.integration.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Documentation | ${{ needs.docs.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [[ "${{ needs.unit-tests.result }}" == "success" && "${{ needs.functional-tests.result }}" == "success" && "${{ needs.security.result }}" == "success" && "${{ needs.lint.result }}" == "success" && "${{ needs.build.result }}" == "success" && "${{ needs.docker.result }}" == "success" && "${{ needs.dependencies.result }}" == "success" && "${{ needs.performance.result }}" == "success" && "${{ needs.integration.result }}" == "success" && "${{ needs.docs.result }}" == "success" ]]; then
          echo "✅ All checks passed!" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ Some checks failed. Please review the logs above." >> $GITHUB_STEP_SUMMARY
          exit 1
        fi 